<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- *****************    namespace에서 dao 설정해야함    *****************  -->
<mapper namespace="com.springlec.base.dao.ProductDao"> 
	
	<!-- CREATE -->
	<insert id="getProductCart">
		INSERT INTO cart (qty, userid, productid, status) VALUES (1, #{id} ,#{productid}, 1)
	</insert>
	
	<insert id="finalOrderBtn">
		INSERT INTO purchase (purchasedate, amount, userid, cartid, payid, purchaseid) VALUES (now(), #{qty}, #{id}, #{cartid}, #{paymethod}, #{purchaseid})
	</insert>
	
	<!-- <insert id="getRecipeCart">
		INSERT INTO cart (qty, userid, recipeid) VALUES (1, #{id} ,#{recipeid})
	</insert> -->
	
	
	<!-- READ -->
	<!-- New Product Start -->
	<select id="newProductView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
		    CASE WHEN p.eventid = e.eventid THEN FORMAT(ROUND(price - (price/salerate), -1), 0)
		    ELSE FORMAT(price, 0)
		    END
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount,
		p.productid, FORMAT(e.salerate, 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW()
		GROUP BY dPrice, price, p.pname, pi.image, p.productid
		ORDER BY p.productid DESC
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="newProductAlignAscView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT ( 
		CASE WHEN p.eventid = e.eventid THEN FORMAT(ROUND(price - (price/salerate), -1), 0) 
		ELSE FORMAT(price, 0) 
		END 
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount, 
		p.productid, FORMAT(e.salerate, 0) AS salerate 
		FROM product p 
		LEFT JOIN price pr ON pr.productid = p.productid 
		LEFT JOIN product_image pi ON pi.productid = p.productid 
		LEFT JOIN productlike pl ON pl.productid = p.productid 
		LEFT JOIN event e ON e.eventid = p.eventid 
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW() 
		GROUP BY dPrice, price, p.pname, pi.image, p.productid 
		ORDER BY dPrice  
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="newProductAlignDescView" resultType="com.springlec.base.model.Product">
		SELECT distinct ( 
		CASE WHEN p.eventid = e.eventid THEN FORMAT(ROUND(price - (price/salerate), -1), 0) 
		ELSE FORMAT(price, 0) 
		END 
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount, 
		p.productid, FORMAT(e.salerate, 0) AS salerate 
		FROM product p 
		LEFT JOIN price pr ON pr.productid = p.productid 
		LEFT JOIN product_image pi ON pi.productid = p.productid 
		LEFT JOIN productlike pl ON pl.productid = p.productid 
		LEFT JOIN event e ON e.eventid = p.eventid 
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW() 
		GROUP BY dPrice, price, p.pname, pi.image, p.productid 
		ORDER BY dPrice DESC 
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	<!-- New Product End -->
	
	
	<!-- Best Product Start-->
	<select id="bestProductView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
        CASE WHEN p.eventid = e.eventid THEN FORMAT(ROUND(price - (price/salerate), -1), 0)
             ELSE FORMAT(price, 0)
		        END
		    ) AS dPrice,
		    FORMAT(price, 0) AS price,
		    UPPER(p.pname) AS pname,
		    pi.image,
		    SUM(pl.likecount) AS likecount,
		    p.productid,
		    FORMAT(e.salerate, 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		GROUP BY dPrice, price, pname, pi.image, p.productid
		ORDER BY likecount DESC
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="bestProductAlignAscView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
        CASE WHEN p.eventid = e.eventid THEN FORMAT(ROUND(price - (price/salerate), -1), 0)
             ELSE FORMAT(price, 0)
		        END
		    ) AS dPrice,
		    FORMAT(price, 0) AS price,
		    UPPER(p.pname) AS pname,
		    pi.image,
		    SUM(pl.likecount) AS likecount,
		    p.productid,
		    FORMAT(e.salerate , 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		GROUP BY dPrice, price, pname, pi.image, p.productid
		ORDER BY dPrice ASC
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="bestProductAlignDescView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
        CASE WHEN p.eventid = e.eventid THEN FORMAT(ROUND(price - (price/salerate), -1), 0)
             ELSE FORMAT(price, 0)
		        END
		    ) AS dPrice,
		    FORMAT(price, 0) AS price,
		    UPPER(p.pname) AS pname,
		    pi.image,
		    SUM(pl.likecount) AS likecount,
		    p.productid,
		    FORMAT(e.salerate, 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		GROUP BY dPrice, price, pname, pi.image, p.productid
		ORDER BY UPPER(dPrice) DESC
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	<!-- Best Product End -->
	
	<!-- Recipe Product Start -->
	<select id="recipeProductView" resultType="com.springlec.base.model.Recipe">
		SELECT y.yname, y.ysrc, y.ytitle,
		FORMAT(SUM(
		        CASE
		            WHEN p.eventid = e.eventid THEN ROUND(price - (price / salerate), -1)
		            ELSE price
		        END
		    ), 0) AS dPrice,
		FORMAT(SUM(price), 0) AS price, SUM(likecount) AS likecount, ry.recipeid, salerate
		FROM youtuber y
		LEFT JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		LEFT JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		LEFT JOIN product p ON p.productid = pr.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		LEFT JOIN price i ON i.productid = p.productid
		GROUP BY y.yname, y.ysrc, ytitle, ry.recipeid, salerate
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="recipeProductAlignAscView" resultType="com.springlec.base.model.Recipe">
		SELECT y.yname, y.ysrc, y.ytitle,
		FORMAT(SUM(
		        CASE
		            WHEN p.eventid = e.eventid THEN ROUND(price - (price / salerate), -1)
		            ELSE price
		        END
		    ), 0) AS dPrice,
		FORMAT(SUM(price), 0) AS price, SUM(likecount) AS likecount, ry.recipeid, salerate
		FROM youtuber y
		LEFT JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		LEFT JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		LEFT JOIN product p ON p.productid = pr.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		LEFT JOIN price i ON i.productid = p.productid
		GROUP BY y.yname, y.ysrc, ytitle, ry.recipeid, salerate
		ORDER BY dPrice
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="recipeProductAlignDescView" resultType="com.springlec.base.model.Recipe">
		SELECT y.yname, y.ysrc, y.ytitle,
		FORMAT(SUM(
		        CASE
		            WHEN p.eventid = e.eventid THEN ROUND(price - (price / salerate), -1)
		            ELSE price
		        END
		    ), 0) AS dPrice,
		FORMAT(SUM(price), 0) AS price, SUM(likecount) AS likecount, ry.recipeid, salerate
		FROM youtuber y
		LEFT JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		LEFT JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		LEFT JOIN product p ON p.productid = pr.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		LEFT JOIN price i ON i.productid = p.productid
		GROUP BY y.yname, y.ysrc, ytitle, ry.recipeid, salerate
		ORDER BY dPrice DESC
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	<!-- Recipe Product End -->
	
	
	<!-- Page Count Start -->
	<select id="newProductPageCount" resultType="Integer">
		SELECT COUNT(*) FROM (
		SELECT DISTINCT (
			CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price / salerate), 0)
				ELSE FORMAT(price, 0)
			END
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount,
		p.productid, FORMAT(e.salerate, 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW()
		GROUP BY dPrice, price, p.pname, pi.image, p.productid
		ORDER BY p.productid DESC
		) AS subquery
	</select>
	
	
	<select id="bestProductPageCount" resultType="Integer">
		SELECT COUNT(*) FROM (
			SELECT DISTINCT FORMAT(pr.price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount, p.productid
			FROM product p
			LEFT JOIN product_image pi ON p.productid = pi.productid
			LEFT JOIN price pr ON p.productid = pr.productid
			LEFT JOIN productlike pl ON p.productid = pl.productid
			GROUP BY price, p.pname, pi.image, p.productid
			ORDER BY likecount DESC
			) AS subquery
	</select>
	
	
	<select id="recipeProductPageCount" resultType="Integer">
		SELECT COUNT(*) count
		FROM youtuber y
		JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		JOIN product p ON p.productid = pr.productid
		JOIN price i ON i.productid = p.productid
		ORDER BY y.youtubeid DESC
	</select>
	<!-- Page Count End -->
	
	<!-- Cart Count -->
	<select id="cartCount" resultType="Integer">
		SELECT COUNT(*) FROM cart WHERE userid = #{id}
	</select>
	
	
	<!-- Event Image -->
	<select id="newAdImg" resultType="String">
		SELECT MAX(img) AS img FROM event WHERE category = 2	
	</select>
	
	<select id="bestAdImgs" resultType="com.springlec.base.model.Product">
		SELECT img FROM event WHERE category = 1;
	</select>
	
	
	<!-- Purchase Start -->
	<select id="orderList" resultType="com.springlec.base.model.Product">
		SELECT c.productid, PRO.pname, c.qty AS qty, ROUND(SUM(price)-(
		    SUM(CASE WHEN e.eventid = pro.eventid THEN (price/salerate)
		             ELSE 0
		         END)
		), -1) AS discountSum,
		ROUND((
		    SUM(CASE WHEN e.eventid = pro.eventid THEN (price/salerate)
		             ELSE 0
		         END)
		), -1) AS discount,
		SUM(price) AS notDiscountSum, PI.image AS image, c.cartid
		FROM cart c
		LEFT JOIN price p ON p.productid = c.productid
		LEFT JOIN product PRO ON PRO.productid = c.productid
		LEFT JOIN product_image PI ON PI.productid = c.productid
		LEFT JOIN customer CUS ON CUS.userid = c.userid
		LEFT JOIN event e ON e.eventid = pro.eventid
		WHERE CUS.userid = #{id} AND c.cartid = #{cartid}
		GROUP BY c.productid, PRO.pname, price, PI.image;
	</select>
	
	<select id="userInfo" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT name, tel_no, email, address, detailaddress
		FROM cart c
		LEFT JOIN price p ON p.productid = c.productid
		LEFT JOIN product pro ON pro.productid = c.productid
		LEFT JOIN event e ON e.eventid = pro.eventid
		LEFT JOIN customer cus ON cus.userid = c.userid
		WHERE c.userid = #{id};
	</select>
	<!-- Purchase End -->
	
	
	<!-- Search Cart Exist -->
	<select id="searchCart" resultType="Integer">
		SELECT qty FROM cart WHERE userid = #{id} and productid = #{productid};
	</select>
	<!-- Search Cart Exist -->
	
	<!-- when click order btn for test -->
	<!-- List type 또한 그냥 just 타입형태만 써주면 된다 -->
	<select id="clickOrderBtn" resultType="Integer">
		SELECT cartid FROM cart WHERE cartid = 2 OR cartid = 3;
	</select>
	
	<select id="checkPurchaseid" resultType="Integer">
		SELECT purchaseid FROM purchase;
	</select>
	<!-- when click order btn for test -->	
	
	
	<!-- UPDATE -->
	<update id="updateProductCart">
		UPDATE cart c
		JOIN product p ON p.productid = c.productid
		JOIN customer cus ON cus.userid = c.userid
		SET qty = #{qty} + 1
		WHERE p.productid = #{productid} AND cus.userid = #{id};
	</update>
	
	<update id="updateCartStatus">
		UPDATE cart c
		SET status = 0
		WHERE cartid = #{cartid}
	</update>
	
	<!-- <update id="updateRecipeCart">
		UPDATE cart c
		JOIN product p ON p.productid = c.productid
		JOIN customer cus ON cus.userid = c.userid
		SET qty = #{qty + 1}
		WHERE p.productid = #{productid} AND cus.userid = #{id};
	</update> -->
	
	
	<!-- DELETE -->
	<!-- <delete id="deleteCart">
		DELETE FROM cart c
        WHERE cartid = #{cartid}
	</delete> -->
	
	
	
	
	
</mapper>