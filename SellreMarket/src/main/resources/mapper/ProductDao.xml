<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- *****************    namespace에서 dao 설정해야함    *****************  -->
<mapper namespace="com.springlec.base.dao.ProductDao"> 
	
	<!-- CREATE -->
	
	<!-- READ -->
	
	<!-- New Product Start -->
	<select id="newProductView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
		    CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
		    ELSE FORMAT(price, 0)
		    END
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount,
		p.productid, FORMAT((e.salerate * 100), 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW()
		GROUP BY dPrice, price, p.pname, pi.image, p.productid
		ORDER BY p.productid DESC
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	
	<select id="newProductAlignAscView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT ( 
		CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0) 
		ELSE FORMAT(price, 0) 
		END 
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount, 
		p.productid, FORMAT((e.salerate * 100), 0) AS salerate 
		FROM product p 
		LEFT JOIN price pr ON pr.productid = p.productid 
		LEFT JOIN product_image pi ON pi.productid = p.productid 
		LEFT JOIN productlike pl ON pl.productid = p.productid 
		LEFT JOIN event e ON e.eventid = p.eventid 
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW() 
		GROUP BY dPrice, price, p.pname, pi.image, p.productid 
		ORDER BY dPrice  
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	
	<select id="newProductAlignDescView" resultType="com.springlec.base.model.Product">
		SELECT distinct ( 
		CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0) 
		ELSE FORMAT(price, 0) 
		END 
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount, 
		p.productid, FORMAT((e.salerate * 100), 0) AS salerate 
		FROM product p 
		LEFT JOIN price pr ON pr.productid = p.productid 
		LEFT JOIN product_image pi ON pi.productid = p.productid 
		LEFT JOIN productlike pl ON pl.productid = p.productid 
		LEFT JOIN event e ON e.eventid = p.eventid 
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW() 
		GROUP BY dPrice, price, p.pname, pi.image, p.productid 
		ORDER BY dPrice DESC 
		LIMIT #{limitFrom}, #{countPerPage}
	</select>
	<!-- New Product End -->
	
	
	<!-- Best Product Start-->
	<select id="bestProductView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
        CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
             ELSE FORMAT(price, 0)
		        END
		    ) AS dPrice,
		    FORMAT(price, 0) AS price,
		    UPPER(p.pname) AS pname,
		    pi.image,
		    SUM(pl.likecount) AS likecount,
		    p.productid,
		    FORMAT((e.salerate * 100), 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		GROUP BY dPrice, price, pname, pi.image, p.productid
		ORDER BY likecount DESC
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	
	<select id="bestProductAlignAscView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
        CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
             ELSE FORMAT(price, 0)
		        END
		    ) AS dPrice,
		    FORMAT(price, 0) AS price,
		    UPPER(p.pname) AS pname,
		    pi.image,
		    SUM(pl.likecount) AS likecount,
		    p.productid,
		    FORMAT((e.salerate * 100), 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		GROUP BY dPrice, price, pname, pi.image, p.productid
		ORDER BY dPrice ASC
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	
	<select id="bestProductAlignDescView" resultType="com.springlec.base.model.Product">
		SELECT DISTINCT (
        CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
             ELSE FORMAT(price, 0)
		        END
		    ) AS dPrice,
		    FORMAT(price, 0) AS price,
		    UPPER(p.pname) AS pname,
		    pi.image,
		    SUM(pl.likecount) AS likecount,
		    p.productid,
		    FORMAT((e.salerate * 100), 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		GROUP BY dPrice, price, pname, pi.image, p.productid
		ORDER BY UPPER(dPrice) DESC
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	<!-- Best Product End -->
	
	<!-- Recipe Product Start -->
	<select id="recipeProductView" resultType="com.springlec.base.model.Product">
		SELECT y.yname,
		       y.ysrc,
		       UPPER(y.ytitle) AS ytitle,
		       (
		           CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
		                ELSE FORMAT(price, 0)
		           END
		       ) AS dPrice,
		       FORMAT(i.price, 0) AS price,
		       SUM(likecount) AS likecount,
		       ry.recipeid,
		       FORMAT((e.salerate * 100), 0) AS salerate
		FROM youtuber y
		JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		JOIN product p ON p.productid = pr.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		JOIN price i ON i.productid = p.productid
		GROUP BY y.yname,
		         y.ysrc,
		         ytitle,
		         dPrice,
		         price,
		         ry.recipeid,
		         salerate
		ORDER BY UPPER(yname) DESC
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	
	<select id="recipeProductAlignAscView" resultType="com.springlec.base.model.Product">
		SELECT y.yname,
		       y.ysrc,
		       UPPER(y.ytitle) AS ytitle,
		       (
		           CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
		                ELSE FORMAT(price, 0)
		           END
		       ) AS dPrice,
		       FORMAT(i.price, 0) AS price,
		       SUM(likecount) AS likecount,
		       ry.recipeid,
		       FORMAT((e.salerate * 100), 0) AS salerate
		FROM youtuber y
		JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		JOIN product p ON p.productid = pr.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		JOIN price i ON i.productid = p.productid
		GROUP BY y.yname,
		         y.ysrc,
		         ytitle,
		         dPrice,
		         price,
		         ry.recipeid,
		         salerate
		ORDER BY dPrice DESC
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	
	<select id="recipeProductAlignDescView" resultType="com.springlec.base.model.Product">
		SELECT y.yname,
		       y.ysrc,
		       UPPER(y.ytitle) AS ytitle,
		       (
		           CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
		                ELSE FORMAT(price, 0)
		           END
		       ) AS dPrice,
		       FORMAT(i.price, 0) AS price,
		       SUM(likecount) AS likecount,
		       ry.recipeid,
		       FORMAT((e.salerate * 100), 0) AS salerate
		FROM youtuber y
		JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		JOIN product p ON p.productid = pr.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		JOIN price i ON i.productid = p.productid
		GROUP BY y.yname,
		         y.ysrc,
		         ytitle,
		         dPrice,
		         price,
		         ry.recipeid,
		         salerate
		ORDER BY dPrice
		LIMIT ${limitFrom}, ${countPerPage}
	</select>
	<!-- Recipe Product End -->
	
	
	<!-- Page Count Start -->
	<select id="newProductPageCount" resultType="Integer">
		SELECT COUNT(*) FROM (
		SELECT DISTINCT (
			CASE WHEN p.eventid = e.eventid THEN FORMAT(price - (price * salerate), 0)
				ELSE FORMAT(price, 0)
			END
		) AS dPrice, FORMAT(price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount,
		p.productid, FORMAT((e.salerate * 100), 0) AS salerate
		FROM product p
		LEFT JOIN price pr ON pr.productid = p.productid
		LEFT JOIN product_image pi ON pi.productid = p.productid
		LEFT JOIN productlike pl ON pl.productid = p.productid
		LEFT JOIN event e ON e.eventid = p.eventid
		WHERE pinsertdate <![CDATA[>=]]> NOW() - INTERVAL 2 WEEK AND pinsertdate <![CDATA[<=]]> NOW()
		GROUP BY dPrice, price, p.pname, pi.image, p.productid
		ORDER BY p.productid DESC
		) AS subquery
	</select>
	
	
	<select id="bestProductPageCount" resultType="Integer">
		SELECT COUNT(*) FROM (
			SELECT DISTINCT FORMAT(pr.price, 0) AS price, p.pname, pi.image, SUM(pl.likecount) AS likecount, p.productid
			FROM product p
			LEFT JOIN product_image pi ON p.productid = pi.productid
			LEFT JOIN price pr ON p.productid = pr.productid
			LEFT JOIN productlike pl ON p.productid = pl.productid
			GROUP BY price, p.pname, pi.image, p.productid
			ORDER BY likecount DESC
			) AS subquery
	</select>
	
	
	<select id="recipeProductPageCount" resultType="Integer">
		SELECT COUNT(*) count
		FROM youtuber y
		JOIN recipeofYoutuber ry ON y.youtubeid = ry.youtubeid
		LEFT JOIN recipelike rl ON ry.recipeid = rl.recipeid
		JOIN productOfRecipe pr ON ry.recipeid = pr.recipeid
		JOIN product p ON p.productid = pr.productid
		JOIN price i ON i.productid = p.productid
		ORDER BY y.youtubeid DESC
	</select>
	<!-- Page Count End -->
	
	<!-- Cart Count -->
	<select id="cartCount" resultType="Integer">
		SELECT COUNT(*) FROM cart WHERE userid = #{id}
	</select>
	
	
	<!-- Event Image -->
	<select id="newAdImg" resultType="String">
		SELECT MAX(img) AS img FROM event WHERE category = 2	
	</select>
	
	<select id="bestAdImgs" resultType="com.springlec.base.model.Product">
		SELECT img FROM event WHERE category = 1;
	</select>
	
	<!-- UPDATE -->
	
	<!-- DELETE -->
	
	
	
	
	
	
</mapper>